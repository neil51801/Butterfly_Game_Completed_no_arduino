import pygame
from pygame.locals import *
from sys import exit

pygame.init()

clock = pygame.time.Clock()
fps = 60

screen_width = 1200
screen_height = 800

screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption('Butterfly Game')

# define game variables
bg_scroll = 0
scroll_speed = 4
flying = False
game_over = False
start_game = False
start_time = 0
game_duration = 60  # in seconds
bottom_limit = screen_height - 100
ceiling_limit = 0  # Set a limit near the top of the screen

# load butterfly images
butterfly_images = [
    pygame.image.load('C:\\Users\\neilm\\Pictures\\pygame\\Butterfly_1.png'),
    pygame.image.load('C:\\Users\\neilm\\Pictures\\pygame\\Butterfly_2.png'),
    pygame.image.load('C:\\Users\\neilm\\Pictures\\pygame\\Butterfly_3.png'),
    pygame.image.load('C:\\Users\\neilm\\Pictures\\pygame\\Butterfly_4.png')
]

# Load forest background and scale it
forest_background = pygame.image.load('C:\\Users\\neilm\\Pictures\\pygame\\Forest_Background.png')
forest_background = pygame.transform.scale(forest_background, (screen_width, screen_height))

# Load gem image and scale it
gem_1_image = pygame.image.load('C:\\Users\\neilm\\Pictures\\pygame\\gem.png').convert_alpha()
gem_images = [gem_1_image]

for i in range(len(gem_images)):
    gem_images[i] = pygame.transform.scale(gem_images[i], (50, 50))

# Load background music and jump sound
background_music = pygame.mixer.Sound('C:\\Users\\neilm\\Pictures\\pygame\\background_music.mp3')
jump_sound = pygame.mixer.Sound('C:\\Users\\neilm\\Pictures\\pygame\\jump.mp3')

# Define game sounds
pygame.mixer.music.load('C:\\Users\\neilm\\Pictures\\pygame\\background_music.mp3')

# Butterfly class
class Butterfly(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.images = butterfly_images
        self.index = 0
        self.counter = 0
        self.image = self.images[self.index]
        self.scaled_image = pygame.transform.scale(self.image, (100, 100))
        self.rect = self.scaled_image.get_rect()
        self.rect.center = [x, y]
        self.vel = 0

    def update(self):
        global flying, game_over, start_time

        # Handle game duration
        if start_game and pygame.time.get_ticks() - start_time > game_duration * 1000:
            game_over = True

        # Handle flying and game over logic
        if flying and not game_over:
            # Gravity
            self.vel += 0.5
            if self.vel > 8:
                self.vel = 8
            self.rect.y += int(self.vel)

            # Set a floor limit near the bottom of the screen
            if self.rect.bottom > bottom_limit:
                self.rect.bottom = bottom_limit
                self.vel = 0

            # Set a ceiling limit near the top of the screen
            if self.rect.top < ceiling_limit:
                self.rect.top = ceiling_limit
                self.vel = 0

        # Handle the animation
        self.counter += 1
        flap_cooldown = 5

        if self.counter > flap_cooldown:
            self.counter = 0
            self.index += 1
            if self.index >= len(self.images):
                self.index = 0
        self.image = self.images[self.index]
        self.scaled_image = pygame.transform.scale(self.image, (100, 100))

        # Rotate the butterfly
        self.scaled_image = pygame.transform.rotate(self.scaled_image, self.vel * -2)

# Gem class
class Gem(pygame.sprite.Sprite):
    def __init__(self, spawn_rate, duration):
        pygame.sprite.Sprite.__init__(self)
        self.images = gem_images
        self.index = 0
        self.counter = 0
        self.image = self.images[self.index]
        self.rect = self.image.get_rect()
        self.spawn_rate = spawn_rate
        self.duration = duration
        self.spawn_time = 0

    def update(self):
        self.rect.x -= 5
        self.image = self.images[self.index]

# Create butterfly group
butterfly_group = pygame.sprite.Group()

# Create gem group
gem_group = pygame.sprite.Group()

# Create butterfly
butterfly = Butterfly(150, int(screen_height / 2))
butterfly_group.add(butterfly)

# Initialize gem spawn variables
gem_spawn_time = 0

# Scoring variables
score = 0
font = pygame.font.Font(None, 36)

# Gem spawning variables
gem_duration = 10  # in seconds
gem_interval = 0.5  # Gem spawns every 0.5 seconds
gem_respawn_time = 0

# Gem spawning restriction variables
gem_spawn_restrictions = [(10, 20), (30, 40), (50, 60)]

run = True
while run:
    clock.tick(fps)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                if not start_game:
                    start_game = True
                    start_time = pygame.time.get_ticks()
                    background_music.play(loops=-1)  # Play background music
                if not game_over:
                    flying = True
                    butterfly.vel = -10
                    jump_sound.play()  # Play jump sound

    # Draw the forest background
    screen.blit(forest_background, (bg_scroll, 0))
    screen.blit(forest_background, (bg_scroll + screen_width, 0))

    # Update butterfly
    butterfly.update()

    # Draw butterfly
    screen.blit(butterfly.scaled_image, butterfly.rect.topleft)

    # Update and draw gems
    gem_group.update()
    gem_group.draw(screen)

    # Handle gem spawning
    current_time = pygame.time.get_ticks()

    # Gem spawning
    if start_game and current_time - start_time <= game_duration * 1000:
        # Check if the current time is within the restricted intervals
        can_spawn_gem = all(
            not (restriction[0] <= (current_time - start_time) / 1000 <= restriction[1])
            for restriction in gem_spawn_restrictions
        )
        if current_time - gem_respawn_time > 1000 * gem_interval and can_spawn_gem:
            gem = Gem(gem_interval, gem_duration)
            gem.rect.x = screen_width - gem.rect.width
            gem.rect.y = 200  # Set gem height fixed at 600 pixels from the bottom
            gem_group.add(gem)
            gem_respawn_time = current_time

    # Scroll the background
    bg_scroll -= scroll_speed
    if abs(bg_scroll) > screen_width:
        bg_scroll = 0

    # Display score
    score_text = font.render(f'Score: {score}', True, (255, 255, 255))
    screen.blit(score_text, (10, 10))

    # Display timer
    timer_text = font.render(f'Time: {int((current_time - start_time) / 1000)}', True, (255, 255, 255))
    screen.blit(timer_text, (10, 50))

    # Check for collisions
    collisions = pygame.sprite.spritecollide(butterfly, gem_group, True)
    if collisions:
        score += len(collisions)

    # Update the display
    pygame.display.update()

pygame.quit()
exit()
